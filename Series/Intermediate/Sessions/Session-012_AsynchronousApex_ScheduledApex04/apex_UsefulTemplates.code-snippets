{
	"Future Method Template": {
		"prefix": "prompt_apex_futuremethod",
		"body": [
			"// 🔹 Use @future for async operations like sending emails or making callouts",
			"// 🔹 Method must be static and return void",
			"// 🔹 If an HTTP callout, include (callout=true)",
			"// 🔹 Only primitive types, collections of primitives, or IDs allowed as parameters",
			"",
			"@future${1: (callout=true)}  // Remove 'callout=true' if you're not an HTTP callout",
			"public static void ${2:yourMethodName}(${3:String} ${4:input}) {",
			"    // TODO: implement logic here",
			"    System.debug('Future method called with input: ' + ${4:input});",
			"}"
		],
		"description": "Template for a @future method with helpful comments"
	},
	"Queueable Apex Class": {
		"prefix": "prompt_apex_queueableclass",
		"body": [
			"// 🔹 Use Queueable Apex when you need to:",
			"//    - Run logic asynchronously",
			"//    - Pass complex/custom data (e.g. lists, wrappers)",
			"//    - Chain another job after finishing",
			"// 🔹 Add 'Database.AllowsCallouts' if making an HTTP callout",
			"",
			"public class ${1:MyQueueableJob} implements Queueable${2:, Database.AllowsCallouts} { // Remove 'Database.AllowsCallouts' if you're not an HTTP callout",
			"",
			"    // 🔸 Define variables to hold passed-in data",
			"    private ${3:String} ${4:inputValue};",
			"",
			"    // 🔸 Constructor I needed to accept values, if no need remove the constructor totally",
			"    public ${1:MyQueueableJob}(${3:String} ${4:inputValue}) {",
			"        this.${4:inputValue} = ${4:inputValue};",
			"    }",
			"",
			"    public void execute(QueueableContext context) {",
			"        // ✅ Logic that runs in the background",
			"        System.debug('🔁 Queueable job started with value: ' + ${4:inputValue});",
			"",
			"        // 🔗 You can chain another Queueable job here if needed:",
			"        // System.enqueueJob(new AnotherQueueable());",
			"    }",
			"}"
		],
		"description": "Queueable Apex template with constructor, optional callout support, and chaining guidance"
	},
	"Batch Apex Class": {
		"prefix": "prompt_apex_batchapex",
		"body": [
			"// 🔹 Use Batch Apex when you need to:",
			"//    - Process large datasets (more than 10,000 records)",
			"//    - Break work into smaller chunks",
			"//    - Make callouts in each chunk (add 'Database.AllowsCallouts')",
			"//    - Maintain state across chunks (add 'Database.Stateful')",
			"",
			"public class ${1:MyBatchJob} implements Database.Batchable<sObject>${2:, Database.AllowsCallouts}${3:, Database.Stateful} {",
			"    // ❗ Remove ', Database.AllowsCallouts' above if you're NOT calling external APIs.",
			"    // ❗ Remove ', Database.Stateful' above if you DON'T need to preserve variables across chunks.",
			"",
			"    // 🔸 Optional: Add properties if you need to keep state across chunks",
			"    // private Integer successCount = 0;",
			"",
			"    public Database.QueryLocator start(Database.BatchableContext bc) {",
			"        // TODO: Write SOQL to return the records to process",
			"        return Database.getQueryLocator('SELECT Id FROM ${4:YourObject}');",
			"    }",
			"",
			"    public void execute(Database.BatchableContext bc, List<sObject> scope) {",
			"        // TODO: Process this chunk of records",
			"        System.debug('🔁 Processing chunk of size: ' + scope.size());",
			"",
			"        // 🔸 REMEMBER:",
			"        // - If a chunk fails, others still run. Failed chunk changes are rolled back.",
			"        // - In test classes, use fewer than or equal to 200 records to stay in 1 batch if not passing batch size to Database.executeBatch().",
			"        // - If you pass a custom scope size in Database.executeBatch(),",
			"        //   make sure the total records in the query align with that size for test expectations.",
			"    }",
			"",
			"    public void finish(Database.BatchableContext bc) {",
			"        System.debug('🎉 Batch job completed.');",
			"",
			"        // 🔗 You can chain another batch or Queueable job here if needed:",
			"        // Database.executeBatch(new AnotherBatchJob());",
			"        // or: System.enqueueJob(new SomeQueueable());",
			"    }",
			"}"
		],
		"description": "Batch Apex template with optional callout, stateful support, chunking notes, and chaining"
	},
	"Scheduled Apex Template": {
		"prefix": "prompt_apex_scheduledapex",
		"body": [
			"// 🔹 Use Scheduled Apex when you want to run logic at a specific time",
			"// 🔹 Good for nightly jobs, monthly cleanups, or off-peak batch processing",
			"// 🔹 Must implement the 'Schedulable' interface and define the 'execute' method",
			"// 🔹 You can schedule this job via Setup UI or System.schedule(...)",
			"",
			"public class ${1:MyScheduledJob} implements Schedulable {",
			"",
			"    public void execute(SchedulableContext sc) {",
			"        // ✅ Logic to run on schedule",
			"        // 👉 Best practice: delegate work to a service class or launch a Batch/Queueable job",
			"",
			"        // Example: Launch a Batch job",
			"        // Database.executeBatch(new YourBatchClass());",
			"",
			"        // Example: Run logic from a service class",
			"        // YourServiceClass.runLogic();",
			"    }",
			"}",
			"",
			"// To schedule this job via code (replace cron expression as needed):",
			"// System.schedule('JobName', '0 0 2 * * ?', new ${1:MyScheduledJob}());"
		],
		"description": "Scheduled Apex job with helpful comments and scheduling example"
	}
}